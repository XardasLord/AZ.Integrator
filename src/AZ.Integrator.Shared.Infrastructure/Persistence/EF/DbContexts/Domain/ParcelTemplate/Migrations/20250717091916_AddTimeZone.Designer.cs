// <auto-generated />
using System;
using AZ.Integrator.Shared.Infrastructure.Persistence.EF.DbContexts.Domain.ParcelTemplate;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace AZ.Integrator.Shared.Infrastructure.Persistence.EF.DbContexts.Domain.ParcelTemplate.Migrations
{
    [DbContext(typeof(TagParcelTemplateDbContext))]
    [Migration("20250717091916_AddTimeZone")]
    partial class AddTimeZone
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AZ.Integrator.TagParcelTemplates.Domain.Aggregates.TagParcelTemplate.TagParcel", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<uint>("Id"));

                    b.Property<string>("Tag")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("tag");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("tenant_id");

                    b.Property<double>("Weight")
                        .HasColumnType("double precision")
                        .HasColumnName("weight");

                    b.HasKey("Id");

                    b.HasIndex("Tag", "TenantId");

                    b.ToTable("tag_parcels", (string)null);
                });

            modelBuilder.Entity("AZ.Integrator.TagParcelTemplates.Domain.Aggregates.TagParcelTemplate.TagParcelTemplate", b =>
                {
                    b.Property<string>("Tag")
                        .HasColumnType("text")
                        .HasColumnName("tag");

                    b.Property<string>("TenantId")
                        .HasColumnType("text")
                        .HasColumnName("tenant_id");

                    b.HasKey("Tag", "TenantId");

                    b.ToTable("tag_parcel_templates", (string)null);
                });

            modelBuilder.Entity("AZ.Integrator.TagParcelTemplates.Domain.Aggregates.TagParcelTemplate.TagParcel", b =>
                {
                    b.HasOne("AZ.Integrator.TagParcelTemplates.Domain.Aggregates.TagParcelTemplate.TagParcelTemplate", null)
                        .WithMany("Parcels")
                        .HasForeignKey("Tag", "TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("AZ.Integrator.TagParcelTemplates.Domain.Aggregates.TagParcelTemplate.ValueObjects.Dimension", "Dimension", b1 =>
                        {
                            b1.Property<uint>("TagParcelId")
                                .HasColumnType("bigint");

                            b1.Property<double>("Height")
                                .HasColumnType("double precision")
                                .HasColumnName("height");

                            b1.Property<double>("Length")
                                .HasColumnType("double precision")
                                .HasColumnName("length");

                            b1.Property<double>("Width")
                                .HasColumnType("double precision")
                                .HasColumnName("width");

                            b1.HasKey("TagParcelId");

                            b1.ToTable("tag_parcels");

                            b1.WithOwner()
                                .HasForeignKey("TagParcelId");
                        });

                    b.Navigation("Dimension");
                });

            modelBuilder.Entity("AZ.Integrator.TagParcelTemplates.Domain.Aggregates.TagParcelTemplate.TagParcelTemplate", b =>
                {
                    b.OwnsOne("AZ.Integrator.Domain.SharedKernel.ValueObjects.CreationInformation", "CreationInformation", b1 =>
                        {
                            b1.Property<string>("TagParcelTemplateTag")
                                .HasColumnType("text");

                            b1.Property<string>("TagParcelTemplateTenantId")
                                .HasColumnType("text");

                            b1.Property<DateTimeOffset>("CreatedAt")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("created_at");

                            b1.Property<Guid>("CreatedBy")
                                .HasColumnType("uuid")
                                .HasColumnName("created_by");

                            b1.HasKey("TagParcelTemplateTag", "TagParcelTemplateTenantId");

                            b1.ToTable("tag_parcel_templates");

                            b1.WithOwner()
                                .HasForeignKey("TagParcelTemplateTag", "TagParcelTemplateTenantId");
                        });

                    b.Navigation("CreationInformation")
                        .IsRequired();
                });

            modelBuilder.Entity("AZ.Integrator.TagParcelTemplates.Domain.Aggregates.TagParcelTemplate.TagParcelTemplate", b =>
                {
                    b.Navigation("Parcels");
                });
#pragma warning restore 612, 618
        }
    }
}
